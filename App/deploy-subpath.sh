#!/bin/bash

# Exit on error
set -e

# Define colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Starting MiscVord VPS Subpath Deployment...${NC}"
echo -e "${BLUE}This script will configure your app for VPS deployment on marvelcollin.my.id${NC}"
echo -e "${BLUE}(IS_VPS=true is always set with this script)${NC}"

# Fixed domain for deployment
DOMAIN="marvelcollin.my.id"
USE_HTTPS=true
PROTOCOL="https"

# Get the subpath from user or use default
DEFAULT_SUBPATH="misvord"
read -p "Enter the subpath for your app (default: $DEFAULT_SUBPATH): " SUBPATH_INPUT
SUBPATH=${SUBPATH_INPUT:-$DEFAULT_SUBPATH}

echo -e "${YELLOW}Setting up for VPS deployment at ${PROTOCOL}://${DOMAIN}/${SUBPATH}/${NC}"

# Confirm with user
read -p "Continue with these settings? (y/n, default: y): " confirm
if [[ $confirm =~ ^[Nn] ]]; then
    echo -e "${YELLOW}Deployment canceled.${NC}"
    exit 0
fi

# Create .env file for VPS deployment
cat > .env << EOL
# MiscVord environment configuration for VPS deployment
# Auto-generated by deploy-subpath.sh on $(date)

# Basic environment configuration
APP_ENV=production         # ALWAYS set to production for VPS deployment
APP_DEBUG=false            # ALWAYS disable debug for production

# Docker ports configuration
APP_PORT=1001              # Use port 1001 to avoid conflicts
SOCKET_PORT=1002
SOCKET_SECURE_PORT=1443
DB_PORT=1003
PMA_PORT=1004
ADMINER_PORT=1005

# Database configuration
DB_HOST=db
DB_NAME=misvord
DB_USER=root
DB_PASS=password
DB_CHARSET=utf8mb4

# Socket server configuration
SOCKET_SERVER=${PROTOCOL}://${DOMAIN}/${SUBPATH}/socket
SOCKET_SERVER_LOCAL=http://localhost:1002
SOCKET_PATH=/${SUBPATH}/socket/socket.io
SOCKET_API_KEY=kolin123
CORS_ALLOWED_ORIGINS=${PROTOCOL}://${DOMAIN}

# VPS deployment specific - ALWAYS ENABLED
IS_VPS=true                # ALWAYS configured for VPS deployment
USE_HTTPS=${USE_HTTPS}
DOMAIN=${DOMAIN}
SUBPATH=${SUBPATH}
EOL

echo -e "${GREEN}Created .env file with VPS configuration${NC}"
echo -e "${YELLOW}Environment Summary:${NC}"
echo -e "  ${BLUE}• Environment:${NC} Production VPS (forced)"
echo -e "  ${BLUE}• APP_ENV:${NC} production"
echo -e "  ${BLUE}• IS_VPS:${NC} true (always true with this script)"
echo -e "  ${BLUE}• Domain:${NC} ${DOMAIN}"
echo -e "  ${BLUE}• Subpath:${NC} ${SUBPATH}"
echo -e "  ${BLUE}• HTTPS:${NC} Enabled"
echo -e "  ${BLUE}• Socket Path:${NC} /${SUBPATH}/socket/socket.io"
echo -e "  ${BLUE}• App Port:${NC} 1001 (changed from 80 to avoid conflicts)"

# Check for docker-compose
if command -v docker-compose > /dev/null 2>&1; then
    DOCKER_COMPOSE="docker-compose"
elif command -v docker > /dev/null 2>&1 && docker compose --help > /dev/null 2>&1; then
    DOCKER_COMPOSE="docker compose"
else
    echo -e "${RED}Neither docker-compose nor docker compose plugin found!${NC}"
    echo -e "${RED}Please install Docker Compose and try again.${NC}"
    exit 1
fi

# Ask user if they want to start containers
read -p "Do you want to build and start containers now? (y/n, default: y): " start_containers
if [[ -z "$start_containers" || "$start_containers" =~ ^[Yy] ]]; then
    echo -e "${YELLOW}Building and starting containers for VPS deployment...${NC}"
    $DOCKER_COMPOSE down
    $DOCKER_COMPOSE build --no-cache
    $DOCKER_COMPOSE up -d

    echo -e "${GREEN}VPS deployment completed successfully!${NC}"

    # Check container status
    echo -e "${YELLOW}Container status:${NC}"
    $DOCKER_COMPOSE ps
else
    echo -e "${YELLOW}Container build skipped. Run '$DOCKER_COMPOSE up -d' manually when ready.${NC}"
fi

# Generate NGINX configuration
echo -e "\n${YELLOW}=== NGINX CONFIGURATION FOR ${DOMAIN} ====${NC}"
echo -e "Add the following to your NGINX server block:\n"

cat << EOF
# MiscVord application running on subpath /${SUBPATH}
location /${SUBPATH}/ {
    proxy_pass http://localhost:1001/;
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;
}

# Socket.IO server for /${SUBPATH}/socket
location /${SUBPATH}/socket/ {
    proxy_pass http://localhost:${SOCKET_PORT:-1002}/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_cache_bypass \$http_upgrade;
    proxy_read_timeout 86400;
}

# Socket.IO specific handlers
location /${SUBPATH}/socket/socket.io/ {
    proxy_pass http://localhost:${SOCKET_PORT:-1002}/socket.io/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_cache_bypass \$http_upgrade;
    proxy_read_timeout 86400;
}
EOF

echo -e "\n${YELLOW}Next steps:${NC}"
echo -e "1. Add the NGINX configuration above to your server"
echo -e "2. Reload NGINX: ${BLUE}sudo systemctl reload nginx${NC}"
echo -e "3. Test your WebSocket connection: ${BLUE}sh check-websocket.sh${NC}"
echo -e "4. Access your application at: ${BLUE}${PROTOCOL}://${DOMAIN}/${SUBPATH}/${NC}" 