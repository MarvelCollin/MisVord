#!/usr/bin/env php
<?php
/**
 * misvord CLI Tool
 * 
 * This file provides command-line interface tools for misvord.
 */

// Define constants
define('APP_ROOT', __DIR__);
define('MIGRATIONS_PATH', __DIR__ . '/migrations');

// Include necessary files
require_once __DIR__ . '/config/helpers.php';

// Load .env file first
if (file_exists(__DIR__ . '/.env')) {
    $envFile = file_get_contents(__DIR__ . '/.env');
    $lines = explode("\n", $envFile);
    foreach ($lines as $line) {
        if (empty(trim($line)) || strpos(trim($line), '#') === 0) {
            continue;
        }
        if (strpos($line, '=') !== false) {
            list($key, $value) = explode('=', $line, 2);
            putenv(trim($key) . '=' . trim($value));
        }
    }
}

// Override with Docker settings for connecting from host to container
// Use db as host which is the Docker service name for the database container
putenv("DB_HOST=db");
// Get the port from the environment or use default 1003
$dbPort = getenv("DB_PORT") ?: "1003";
putenv("DB_PORT=" . $dbPort);
// Set explicit password for database
putenv("DB_PASS=kolin123");

require_once __DIR__ . '/config/env.php';
require_once __DIR__ . '/config/db.php';

// Get CLI arguments
$argv = $_SERVER['argv'];
$argc = $_SERVER['argc'];

// Check if any command is provided
if ($argc < 2) {
    echo "\033[33mmisvord CLI Tool\033[0m\n\n";
    echo "Available commands:\n";
    echo "  \033[32mserve\033[0m [host:port]      Start the development server\n";
    echo "  \033[32mmigrate\033[0m                Run database migrations\n";
    echo "  \033[32mmigrate:fresh\033[0m          Drop all tables and re-run migrations\n";
    echo "  \033[32mmigrate:rollback\033[0m       Roll back the last migration batch\n";
    echo "  \033[32mmigrate:status\033[0m         Show migration status\n";
    echo "  \033[32mmake:migration\033[0m name    Create a new migration file\n";
    echo "  \033[32mdb:check\033[0m               Test database connection\n";
    exit(0);
}

// Command handling
$command = $argv[1];

// Check Docker environment variables
$isDocker = getenv('IS_DOCKER') === 'true' || file_exists('/.dockerenv');
if ($isDocker) {
    echo "\033[34mRunning in Docker environment\033[0m\n";
} else {
    echo "\033[34mRunning in local environment\033[0m\n";
}

try {
    switch ($command) {
        case 'serve':
            $hostPort = $argv[2] ?? 'localhost:8000';
            list($host, $port) = explode(':', $hostPort);
            $port = (int) $port;
            
            echo "\033[32mStarting development server on http://$host:$port\033[0m\n";
            $command = sprintf(
                'php -S %s:%d -t %s %s',
                $host,
                $port,
                escapeshellarg(APP_ROOT),
                escapeshellarg(APP_ROOT . '/router.php')
            );
            
            passthru($command);
            break;
            
        case 'migrate':
            echo "\033[32mRunning database migrations...\033[0m\n";
            require_once APP_ROOT . '/database/migration.php';
            
            try {
                $pdo = get_db_connection();
                $migration = new Migration($pdo);
                $migrationRunner = new MigrationRunner($pdo);
                $migrationRunner->run();
            } catch (Exception $e) {
                echo "\033[31mError: " . $e->getMessage() . "\033[0m\n";
            }
            break;
            
        case 'migrate:fresh':
            echo "\033[33mDropping all tables and re-running migrations...\033[0m\n";
            require_once APP_ROOT . '/database/migration.php';
            
            try {
                $pdo = get_db_connection();
                $migration = new Migration($pdo);
                $migrationRunner = new MigrationRunner($pdo);
                $migrationRunner->fresh();
            } catch (Exception $e) {
                echo "\033[31mError: " . $e->getMessage() . "\033[0m\n";
            }
            break;
            
        case 'migrate:rollback':
            echo "\033[33mRolling back last migration batch...\033[0m\n";
            require_once APP_ROOT . '/database/migration.php';
            
            try {
                $pdo = get_db_connection();
                $migration = new Migration($pdo);
                $migrationRunner = new MigrationRunner($pdo);
                $migrationRunner->rollback();
            } catch (Exception $e) {
                echo "\033[31mError: " . $e->getMessage() . "\033[0m\n";
            }
            break;
            
        case 'migrate:status':
            echo "\033[32mChecking migration status...\033[0m\n";
            require_once APP_ROOT . '/database/migration.php';
            
            try {
                $pdo = get_db_connection();
                $migration = new Migration($pdo);
                $migrationRunner = new MigrationRunner($pdo);
                
                $appliedMigrations = $migrationRunner->getAppliedMigrations();
                $pendingMigrations = $migrationRunner->getPendingMigrations();
                
                if (empty($appliedMigrations) && empty($pendingMigrations)) {
                    echo "\033[33mNo migrations found\033[0m\n";
                    break;
                }
                
                if (!empty($appliedMigrations)) {
                    echo "\n\033[32mApplied Migrations:\033[0m\n";
                    foreach ($appliedMigrations as $migration) {
                        echo "  ✓ " . $migration['migration'] . " (Batch: " . $migration['batch'] . ")\n";
                    }
                }
                
                if (!empty($pendingMigrations)) {
                    echo "\n\033[33mPending Migrations:\033[0m\n";
                    foreach ($pendingMigrations as $migration) {
                        echo "  ⟳ " . $migration . "\n";
                    }
                }
            } catch (Exception $e) {
                echo "\033[31mError: " . $e->getMessage() . "\033[0m\n";
            }
            break;
            
        case 'make:migration':
            if (!isset($argv[2])) {
                echo "\033[31mError: Migration name required\033[0m\n";
                echo "Usage: php artisan make:migration migration_name\n";
                exit(1);
            }
            
            $file = create_migration($argv[2]);
            if ($file) {
                echo "\033[32mMigration created: \033[0m" . basename($file) . "\n";
            } else {
                echo "\033[31mError: Could not create migration file\033[0m\n";
                exit(1);
            }
            break;
            
        case 'db:check':
            echo "\033[32mTesting database connection...\033[0m\n";
            
            try {
                $pdo = get_db_connection();
                echo "\033[32m✓ Successfully connected to MySQL server.\033[0m\n";
                echo "\033[32m✓ Successfully connected to database.\033[0m\n";
                
                // Try to create migration table to verify full functionality
                try {
                    $createTableSQL = "CREATE TABLE IF NOT EXISTS `migrations` (
                        `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
                        `migration` varchar(255) NOT NULL,
                        `batch` int(11) NOT NULL,
                        PRIMARY KEY (`id`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
                    
                    $pdo->exec($createTableSQL);
                    echo "\033[32m✓ Migration table exists or was created successfully.\033[0m\n";
                    echo "\n\033[32mDatabase connection is fully working!\033[0m\n";
                } catch (PDOException $e) {
                    echo "\033[31m✗ Could not create migration table: " . $e->getMessage() . "\033[0m\n";
                }
            } catch (Exception $e) {
                echo "\033[31m✗ Connection failed: " . $e->getMessage() . "\033[0m\n";
            }
            break;
            
        default:
            echo "\033[33mmisvord CLI Tool\033[0m\n\n";
            echo "Available commands:\n";
            echo "  \033[32mserve\033[0m [host:port]      Start the development server\n";
            echo "  \033[32mmigrate\033[0m                Run database migrations\n";
            echo "  \033[32mmigrate:fresh\033[0m          Drop all tables and re-run migrations\n";
            echo "  \033[32mmigrate:rollback\033[0m       Roll back the last migration batch\n";
            echo "  \033[32mmigrate:status\033[0m         Show migration status\n";
            echo "  \033[32mmake:migration\033[0m name    Create a new migration file\n";
            echo "  \033[32mdb:check\033[0m               Test database connection\n";
            break;
    }
} catch (PDOException $e) {
    echo "\n\033[31mDatabase Error:\033[0m " . $e->getMessage() . "\n";
    
    // Provide helpful suggestions based on error codes
    switch ($e->getCode()) {
        case 1045: // Access denied
            echo "\033[33mCheck your database credentials in .env file or docker-compose.yml.\033[0m\n";
            break;
        case 2002: // Connection refused
            echo "\033[33mCannot connect to MySQL server. If using Docker, make sure the db container is running.\033[0m\n";
            break;
        case 1049: // Unknown database
            echo "\033[33mDatabase does not exist. Running with --force will attempt to create it.\033[0m\n";
            break;
    }
    
    exit(1);
}

exit(0);
