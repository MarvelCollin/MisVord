#!/usr/bin/env php
<?php
/**
 * MiscVord CLI Tool
 * 
 * This file provides command-line interface tools for MiscVord.
 */

// Define constants
define('APP_ROOT', __DIR__);
define('MIGRATIONS_PATH', __DIR__ . '/migrations');

// Include necessary files
require_once __DIR__ . '/config/helpers.php';

// Get CLI arguments
$argv = $_SERVER['argv'];
$argc = $_SERVER['argc'];

// Check if any command is provided
if ($argc < 2) {
    echo "\033[33mMiscVord CLI Tool\033[0m\n\n";
    echo "Available commands:\n";
    echo "  \033[32mserve\033[0m [host:port]      Start the development server\n";
    echo "  \033[32mmigrate\033[0m                Run database migrations\n";
    echo "  \033[32mmigrate:fresh\033[0m          Drop all tables and re-run migrations\n";
    echo "  \033[32mmigrate:rollback\033[0m       Roll back the last migration batch\n";
    echo "  \033[32mmake:migration\033[0m name    Create a new migration file\n";
    exit(0);
}

// Command handling
$command = $argv[1];

switch ($command) {
    case 'serve':
        $hostPort = $argv[2] ?? 'localhost:8000';
        list($host, $port) = explode(':', $hostPort);
        $port = (int) $port;
        
        echo "\033[32mStarting development server on http://$host:$port\033[0m\n";
        $command = sprintf(
            'php -S %s:%d -t %s %s',
            $host,
            $port,
            escapeshellarg(APP_ROOT),
            escapeshellarg(APP_ROOT . '/router.php')
        );
        
        passthru($command);
        break;
        
    case 'migrate':
        echo "\033[32mRunning database migrations...\033[0m\n";
        require_once APP_ROOT . '/database/migration.php';
        
        // Fixed: Use MigrationRunner instead of Migration directly
        $migrationRunner = new MigrationRunner();
        $migrationRunner->run();
        break;
        
    case 'migrate:fresh':
        echo "\033[33mDropping all tables and re-running migrations...\033[0m\n";
        require_once APP_ROOT . '/database/migration.php';
        
        // Fixed: Use MigrationRunner instead of Migration directly
        $migrationRunner = new MigrationRunner();
        $migrationRunner->fresh();
        break;
        
    case 'migrate:rollback':
        echo "\033[33mRolling back last migration batch...\033[0m\n";
        require_once APP_ROOT . '/database/migration.php';
        
        // Fixed: Use MigrationRunner instead of Migration directly
        $migrationRunner = new MigrationRunner();
        $migrationRunner->rollback();
        break;
        
    case 'make:migration':
        if (!isset($argv[2])) {
            echo "\033[31mError: Migration name required\033[0m\n";
            echo "Usage: php artisan make:migration migration_name\n";
            exit(1);
        }
        
        $file = create_migration($argv[2]);
        if ($file) {
            echo "\033[32mMigration created: \033[0m" . basename($file) . "\n";
        } else {
            echo "\033[31mError: Could not create migration file\033[0m\n";
            exit(1);
        }
        break;
        
    default:
        echo "\033[33mMiscVord CLI Tool\033[0m\n\n";
        echo "Available commands:\n";
        echo "  \033[32mserve\033[0m [host:port]      Start the development server\n";
        echo "  \033[32mmigrate\033[0m                Run database migrations\n";
        echo "  \033[32mmigrate:fresh\033[0m          Drop all tables and re-running migrations\n";
        echo "  \033[32mmigrate:rollback\033[0m       Roll back the last migration batch\n";
        echo "  \033[32mmake:migration\033[0m name    Create a new migration file\n";
        break;
}

exit(0);
