#!/bin/bash

# Exit on error
set -e

# Define colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Starting MiscVord VPS Deployment Process...${NC}"
echo -e "${BLUE}This script will ALWAYS configure for VPS deployment to marvelcollin.my.id${NC}"

# Force VPS mode regardless of environment
IS_VPS=true
DOMAIN="marvelcollin.my.id"
USE_HTTPS=true
SUBPATH="misvord"

echo -e "${GREEN}VPS deployment configuration:${NC}"
echo -e "  ${BLUE}• Domain:${NC} $DOMAIN"
echo -e "  ${BLUE}• HTTPS:${NC} Enabled"
echo -e "  ${BLUE}• Subpath:${NC} /$SUBPATH"

# Confirm with user
read -p "Continue with these settings? (y/n, default: y): " confirm
if [[ $confirm =~ ^[Nn] ]]; then
    echo -e "${YELLOW}Deployment canceled.${NC}"
    exit 0
fi

# Create environment file
echo -e "${YELLOW}Creating environment configuration for VPS deployment...${NC}"

# Create .env file with VPS settings
cat > .env << EOL
# MiscVord environment configuration
# Auto-generated by deploy.sh for VPS deployment on $(date)

# Basic environment configuration
APP_ENV=production
APP_DEBUG=false

# Docker ports configuration
# Each service uses the same port number for both host and container
APP_PORT=1001
SOCKET_PORT=1002
SOCKET_SECURE_PORT=1443
DB_PORT=1003
PMA_PORT=1004
ADMINER_PORT=1005

# Database configuration
DB_HOST=db
DB_NAME=misvord
DB_USER=root
DB_PASS=password
DB_CHARSET=utf8mb4

# Socket server configuration
SOCKET_SERVER=https://${DOMAIN}/${SUBPATH}/socket
SOCKET_SERVER_LOCAL=http://localhost:1002
SOCKET_PATH=/${SUBPATH}/socket/socket.io
SOCKET_API_KEY=kolin123
CORS_ALLOWED_ORIGINS=https://${DOMAIN}

# VPS deployment specific - FORCED
IS_VPS=true
USE_HTTPS=true
DOMAIN=${DOMAIN}
SUBPATH=${SUBPATH}
EOL

echo -e "${GREEN}VPS environment configuration created!${NC}"
echo -e "${YELLOW}Configuration summary:${NC}"
echo -e "  ${BLUE}• Environment:${NC} Production VPS"
echo -e "  ${BLUE}• APP_ENV:${NC} production"
echo -e "  ${BLUE}• IS_VPS:${NC} true"
echo -e "  ${BLUE}• Domain:${NC} $DOMAIN"
echo -e "  ${BLUE}• HTTPS:${NC} Enabled"
echo -e "  ${BLUE}• Subpath:${NC} /$SUBPATH"
echo -e "  ${BLUE}• Socket Path:${NC} /$SUBPATH/socket/socket.io"
echo -e "  ${BLUE}• App Port:${NC} 1001"
echo -e "  ${BLUE}• Socket Port:${NC} 1002"
echo -e "  ${BLUE}• DB Port:${NC} 1003"
echo -e "  ${BLUE}• PHPMyAdmin Port:${NC} 1004"
echo -e "  ${BLUE}• Adminer Port:${NC} 1005"

# Check for docker-compose
if ! command -v docker-compose &> /dev/null; then
    if ! command -v docker compose &> /dev/null; then
        echo -e "${RED}Docker Compose not found! Please install Docker Compose.${NC}"
        exit 1
    else
        DOCKER_COMPOSE="docker compose"
    fi
else
    DOCKER_COMPOSE="docker-compose"
fi

# Ask user if they want to start containers
read -p "Do you want to build and start containers now? (y/n, default: y): " start_containers
if [[ -z "$start_containers" || "$start_containers" =~ ^[Yy] ]]; then
    echo -e "${YELLOW}Building and starting containers for VPS deployment...${NC}"
    $DOCKER_COMPOSE down
    $DOCKER_COMPOSE build --no-cache
    $DOCKER_COMPOSE up -d

    echo -e "${GREEN}VPS deployment completed successfully!${NC}"

    # Check container status
    echo -e "${YELLOW}Container status:${NC}"
    $DOCKER_COMPOSE ps
else
    echo -e "${YELLOW}Container build skipped. Run '$DOCKER_COMPOSE up -d' manually when ready.${NC}"
fi

# Check for existing NGINX configuration
NGINX_CONFIG_PATH="nginx-config.conf"
NGINX_SITES_PATH="/etc/nginx/sites-available/marvelcollin.my.id.conf"

echo -e "\n${YELLOW}=== CHECKING NGINX CONFIGURATION ===${NC}"

if [ -f "$NGINX_CONFIG_PATH" ]; then
    echo -e "${GREEN}Found existing NGINX configuration: ${NGINX_CONFIG_PATH}${NC}"
    echo -e "${YELLOW}Would you like to use this existing configuration?${NC}"
    read -p "This is recommended to avoid conflicts (y/n, default: y): " use_existing_config
    
    if [[ -z "$use_existing_config" || "$use_existing_config" =~ ^[Yy] ]]; then
        echo -e "${GREEN}Using existing NGINX configuration from ${NGINX_CONFIG_PATH}${NC}"
        NGINX_CONFIG_FILE=$NGINX_CONFIG_PATH
        
        # Check if the configuration contains the correct subpath
        if grep -q "location /${SUBPATH}/" "$NGINX_CONFIG_FILE"; then
            echo -e "${GREEN}Configuration includes the correct subpath /${SUBPATH}/${NC}"
        else
            echo -e "${YELLOW}Warning: Configuration may not contain the correct subpath /${SUBPATH}/${NC}"
            echo -e "${YELLOW}Please review the configuration file manually.${NC}"
        fi
    else
        echo -e "${YELLOW}Generating new NGINX configuration...${NC}"
        NGINX_CONFIG_FILE="${SUBPATH}-new.conf"
        
        # Generate new config file
        cat > $NGINX_CONFIG_FILE << EOF
server {
    listen 443 ssl;
    server_name ${DOMAIN};
    
    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    
    # Main application under /${SUBPATH}
    location /${SUBPATH}/ {
        proxy_pass http://localhost:1001/;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Socket server under /${SUBPATH}/socket
    location /${SUBPATH}/socket/ {
        proxy_pass http://localhost:1002/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        proxy_read_timeout 86400;
    }

    # Socket.IO specific path for connections
    location /${SUBPATH}/socket/socket.io/ {
        proxy_pass http://localhost:1002/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        proxy_read_timeout 86400;
    }
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name ${DOMAIN};
    return 301 https://\$host\$request_uri;
}
EOF
        echo -e "${YELLOW}Warning: Using a new configuration may conflict with the existing one.${NC}"
    fi
else
    echo -e "${YELLOW}No existing NGINX configuration found. Generating new one...${NC}"
    NGINX_CONFIG_FILE="${SUBPATH}.conf"
    
    # Generate new config file
    cat > $NGINX_CONFIG_FILE << EOF
server {
    listen 443 ssl;
    server_name ${DOMAIN};
    
    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    
    # Main application under /${SUBPATH}
    location /${SUBPATH}/ {
        proxy_pass http://localhost:1001/;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Socket server under /${SUBPATH}/socket
    location /${SUBPATH}/socket/ {
        proxy_pass http://localhost:1002/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        proxy_read_timeout 86400;
    }

    # Socket.IO specific path for connections
    location /${SUBPATH}/socket/socket.io/ {
        proxy_pass http://localhost:1002/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        proxy_read_timeout 86400;
    }
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name ${DOMAIN};
    return 301 https://\$host\$request_uri;
}
EOF
fi

echo -e "${GREEN}NGINX configuration file: ${NGINX_CONFIG_FILE}${NC}"
echo -e "${YELLOW}Would you like to install the NGINX configuration?${NC}"
read -p "This requires sudo privileges (y/n, default: y): " install_nginx

if [[ -z "$install_nginx" || "$install_nginx" =~ ^[Yy] ]]; then
    echo -e "${YELLOW}Installing NGINX configuration...${NC}"
    
    # Check if this is using the existing config
    if [ "$NGINX_CONFIG_FILE" = "$NGINX_CONFIG_PATH" ]; then
        NGINX_DEST="/etc/nginx/sites-available/marvelcollin.my.id.conf"
        echo -e "${YELLOW}Installing existing configuration to $NGINX_DEST...${NC}"
    else
        NGINX_DEST="/etc/nginx/sites-available/${NGINX_CONFIG_FILE}"
        echo -e "${YELLOW}Installing new configuration to $NGINX_DEST...${NC}"
    fi
    
    # Check for SSL certificates
    if [ ! -d "/etc/letsencrypt/live/${DOMAIN}" ]; then
        echo -e "${YELLOW}SSL certificates for ${DOMAIN} not found. Would you like to generate them now?${NC}"
        read -p "This requires sudo privileges and certbot installed (y/n, default: y): " gen_ssl
        
        if [[ -z "$gen_ssl" || "$gen_ssl" =~ ^[Yy] ]]; then
            echo -e "${YELLOW}Generating SSL certificates with certbot...${NC}"
            sudo certbot --nginx -d ${DOMAIN}
        else
            echo -e "${RED}Warning: Continuing without SSL certificates. HTTPS will not work correctly.${NC}"
        fi
    else
        echo -e "${GREEN}SSL certificates for ${DOMAIN} already exist.${NC}"
    fi
    
    # Copy NGINX config to sites-available
    sudo cp $NGINX_CONFIG_FILE $NGINX_DEST

    # Create symlink in sites-enabled if it doesn't exist
    if [ ! -f "/etc/nginx/sites-enabled/$(basename $NGINX_DEST)" ]; then
        sudo ln -s $NGINX_DEST /etc/nginx/sites-enabled/
        echo -e "${GREEN}Created symlink in sites-enabled${NC}"
    else
        echo -e "${GREEN}Symlink in sites-enabled already exists${NC}"
    fi
    
    # Test NGINX config
    echo -e "${YELLOW}Testing NGINX configuration...${NC}"
    sudo nginx -t
    
    if [ $? -eq 0 ]; then
        # Reload NGINX
        echo -e "${YELLOW}Reloading NGINX...${NC}"
        sudo systemctl reload nginx
        
        echo -e "${GREEN}NGINX configuration installed and reloaded successfully!${NC}"
    else
        echo -e "${RED}NGINX configuration test failed. Please check the configuration manually.${NC}"
        echo -e "${RED}NGINX was not reloaded to prevent service disruption.${NC}"
    fi
    
    # Run WebSocket check
    echo -e "${YELLOW}Testing WebSocket connection...${NC}"
    sh check-websocket.sh
else
    echo -e "${YELLOW}Manual NGINX installation:${NC}"
    echo -e "1. Copy the configuration file to your NGINX sites-available directory:"
    echo -e "   ${BLUE}sudo cp ${NGINX_CONFIG_FILE} /etc/nginx/sites-available/${NC}"
    echo -e "2. Create symlink: ${BLUE}sudo ln -s /etc/nginx/sites-available/$(basename $NGINX_CONFIG_FILE) /etc/nginx/sites-enabled/${NC}"
    echo -e "3. Test configuration: ${BLUE}sudo nginx -t${NC}"
    echo -e "4. Reload NGINX: ${BLUE}sudo systemctl reload nginx${NC}"
    echo -e "5. Test your WebSocket connection: ${BLUE}sh check-websocket.sh${NC}"
fi

echo -e "\n${GREEN}Deployment Complete!${NC}"
echo -e "${BLUE}Your MiscVord app is now available at: https://${DOMAIN}/${SUBPATH}/${NC}"
echo -e "\n${YELLOW}Port configuration:${NC}"
echo -e "  ${BLUE}• Main app:${NC} http://localhost:1001"
echo -e "  ${BLUE}• Socket server:${NC} http://localhost:1002"
echo -e "  ${BLUE}• MySQL:${NC} localhost:1003"
echo -e "  ${BLUE}• PHPMyAdmin:${NC} http://localhost:1004"
echo -e "  ${BLUE}• Adminer:${NC} http://localhost:1005" 